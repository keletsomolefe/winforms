#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hawks_Business_Solutions
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HBS")]
	public partial class HBSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertBankingDetail(BankingDetail instance);
    partial void UpdateBankingDetail(BankingDetail instance);
    partial void DeleteBankingDetail(BankingDetail instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCompanyInformation(CompanyInformation instance);
    partial void UpdateCompanyInformation(CompanyInformation instance);
    partial void DeleteCompanyInformation(CompanyInformation instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeJobDuration(EmployeeJobDuration instance);
    partial void UpdateEmployeeJobDuration(EmployeeJobDuration instance);
    partial void DeleteEmployeeJobDuration(EmployeeJobDuration instance);
    partial void InsertEmployeeType(EmployeeType instance);
    partial void UpdateEmployeeType(EmployeeType instance);
    partial void DeleteEmployeeType(EmployeeType instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertInventoryLine(InventoryLine instance);
    partial void UpdateInventoryLine(InventoryLine instance);
    partial void DeleteInventoryLine(InventoryLine instance);
    partial void InsertInventoryWrittenOff(InventoryWrittenOff instance);
    partial void UpdateInventoryWrittenOff(InventoryWrittenOff instance);
    partial void DeleteInventoryWrittenOff(InventoryWrittenOff instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertInvoicePayment(InvoicePayment instance);
    partial void UpdateInvoicePayment(InvoicePayment instance);
    partial void DeleteInvoicePayment(InvoicePayment instance);
    partial void InsertJobOrder(JobOrder instance);
    partial void UpdateJobOrder(JobOrder instance);
    partial void DeleteJobOrder(JobOrder instance);
    partial void InsertJobOrderStatus(JobOrderStatus instance);
    partial void UpdateJobOrderStatus(JobOrderStatus instance);
    partial void DeleteJobOrderStatus(JobOrderStatus instance);
    partial void InsertJobQuote(JobQuote instance);
    partial void UpdateJobQuote(JobQuote instance);
    partial void DeleteJobQuote(JobQuote instance);
    partial void InsertNextOfKin(NextOfKin instance);
    partial void UpdateNextOfKin(NextOfKin instance);
    partial void DeleteNextOfKin(NextOfKin instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertOrdersMade(OrdersMade instance);
    partial void UpdateOrdersMade(OrdersMade instance);
    partial void DeleteOrdersMade(OrdersMade instance);
    partial void InsertServiceLine(ServiceLine instance);
    partial void UpdateServiceLine(ServiceLine instance);
    partial void DeleteServiceLine(ServiceLine instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertSupplierInvoice(SupplierInvoice instance);
    partial void UpdateSupplierInvoice(SupplierInvoice instance);
    partial void DeleteSupplierInvoice(SupplierInvoice instance);
    partial void InsertSupplierOrderStatus(SupplierOrderStatus instance);
    partial void UpdateSupplierOrderStatus(SupplierOrderStatus instance);
    partial void DeleteSupplierOrderStatus(SupplierOrderStatus instance);
    partial void InsertWorkLine(WorkLine instance);
    partial void UpdateWorkLine(WorkLine instance);
    partial void DeleteWorkLine(WorkLine instance);
    partial void InsertVAT(VAT instance);
    partial void UpdateVAT(VAT instance);
    partial void DeleteVAT(VAT instance);
    partial void InsertUserLog(UserLog instance);
    partial void UpdateUserLog(UserLog instance);
    partial void DeleteUserLog(UserLog instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public HBSDataContext() : 
				base(global::Hawks_Business_Solutions.Properties.Settings.Default.HBSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HBSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HBSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HBSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HBSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<BankingDetail> BankingDetails
		{
			get
			{
				return this.GetTable<BankingDetail>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<CompanyInformation> CompanyInformations
		{
			get
			{
				return this.GetTable<CompanyInformation>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeJobDuration> EmployeeJobDurations
		{
			get
			{
				return this.GetTable<EmployeeJobDuration>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeType> EmployeeTypes
		{
			get
			{
				return this.GetTable<EmployeeType>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<InventoryLine> InventoryLines
		{
			get
			{
				return this.GetTable<InventoryLine>();
			}
		}
		
		public System.Data.Linq.Table<InventoryWrittenOff> InventoryWrittenOffs
		{
			get
			{
				return this.GetTable<InventoryWrittenOff>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<InvoicePayment> InvoicePayments
		{
			get
			{
				return this.GetTable<InvoicePayment>();
			}
		}
		
		public System.Data.Linq.Table<JobOrder> JobOrders
		{
			get
			{
				return this.GetTable<JobOrder>();
			}
		}
		
		public System.Data.Linq.Table<JobOrderStatus> JobOrderStatus
		{
			get
			{
				return this.GetTable<JobOrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<JobQuote> JobQuotes
		{
			get
			{
				return this.GetTable<JobQuote>();
			}
		}
		
		public System.Data.Linq.Table<NextOfKin> NextOfKins
		{
			get
			{
				return this.GetTable<NextOfKin>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<OrdersMade> OrdersMades
		{
			get
			{
				return this.GetTable<OrdersMade>();
			}
		}
		
		public System.Data.Linq.Table<ServiceLine> ServiceLines
		{
			get
			{
				return this.GetTable<ServiceLine>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<SupplierInvoice> SupplierInvoices
		{
			get
			{
				return this.GetTable<SupplierInvoice>();
			}
		}
		
		public System.Data.Linq.Table<SupplierOrderStatus> SupplierOrderStatus
		{
			get
			{
				return this.GetTable<SupplierOrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<WorkLine> WorkLines
		{
			get
			{
				return this.GetTable<WorkLine>();
			}
		}
		
		public System.Data.Linq.Table<VAT> VATs
		{
			get
			{
				return this.GetTable<VAT>();
			}
		}
		
		public System.Data.Linq.Table<UserLog> UserLogs
		{
			get
			{
				return this.GetTable<UserLog>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressId;
		
		private string _StreetName;
		
		private string _PostalCode;
		
		private string _City;
		
		private string _Province;
		
		private string _Suburb;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<CompanyInformation> _CompanyInformations;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Supplier> _Suppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnStreetNameChanging(string value);
    partial void OnStreetNameChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnSuburbChanging(string value);
    partial void OnSuburbChanged();
    #endregion
		
		public Address()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._CompanyInformations = new EntitySet<CompanyInformation>(new Action<CompanyInformation>(this.attach_CompanyInformations), new Action<CompanyInformation>(this.detach_CompanyInformations));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetName", DbType="VarChar(20)")]
		public string StreetName
		{
			get
			{
				return this._StreetName;
			}
			set
			{
				if ((this._StreetName != value))
				{
					this.OnStreetNameChanging(value);
					this.SendPropertyChanging();
					this._StreetName = value;
					this.SendPropertyChanged("StreetName");
					this.OnStreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="Char(10)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(25)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suburb", DbType="VarChar(25)")]
		public string Suburb
		{
			get
			{
				return this._Suburb;
			}
			set
			{
				if ((this._Suburb != value))
				{
					this.OnSuburbChanging(value);
					this.SendPropertyChanging();
					this._Suburb = value;
					this.SendPropertyChanged("Suburb");
					this.OnSuburbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Client", Storage="_Clients", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_CompanyInformation", Storage="_CompanyInformations", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<CompanyInformation> CompanyInformations
		{
			get
			{
				return this._CompanyInformations;
			}
			set
			{
				this._CompanyInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Employee", Storage="_Employees", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Supplier", Storage="_Suppliers", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_CompanyInformations(CompanyInformation entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_CompanyInformations(CompanyInformation entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankingDetails")]
	public partial class BankingDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankDetailsId;
		
		private string _BankName;
		
		private string _AccountNumber;
		
		private string _BranchCode;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Supplier> _Suppliers;
		
		private EntitySet<SupplierInvoice> _SupplierInvoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankDetailsIdChanging(int value);
    partial void OnBankDetailsIdChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnBranchCodeChanging(string value);
    partial void OnBranchCodeChanged();
    #endregion
		
		public BankingDetail()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._SupplierInvoices = new EntitySet<SupplierInvoice>(new Action<SupplierInvoice>(this.attach_SupplierInvoices), new Action<SupplierInvoice>(this.detach_SupplierInvoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankDetailsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BankDetailsId
		{
			get
			{
				return this._BankDetailsId;
			}
			set
			{
				if ((this._BankDetailsId != value))
				{
					this.OnBankDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._BankDetailsId = value;
					this.SendPropertyChanged("BankDetailsId");
					this.OnBankDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this.OnBranchCodeChanging(value);
					this.SendPropertyChanging();
					this._BranchCode = value;
					this.SendPropertyChanged("BranchCode");
					this.OnBranchCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankingDetail_Invoice", Storage="_Invoices", ThisKey="BankDetailsId", OtherKey="BankingDetailsId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankingDetail_Supplier", Storage="_Suppliers", ThisKey="BankDetailsId", OtherKey="BankDetailsId")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankingDetail_SupplierInvoice", Storage="_SupplierInvoices", ThisKey="BankDetailsId", OtherKey="BankDetailsId")]
		public EntitySet<SupplierInvoice> SupplierInvoices
		{
			get
			{
				return this._SupplierInvoices;
			}
			set
			{
				this._SupplierInvoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.BankingDetail = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.BankingDetail = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.BankingDetail = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.BankingDetail = null;
		}
		
		private void attach_SupplierInvoices(SupplierInvoice entity)
		{
			this.SendPropertyChanging();
			entity.BankingDetail = this;
		}
		
		private void detach_SupplierInvoices(SupplierInvoice entity)
		{
			this.SendPropertyChanging();
			entity.BankingDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientId;
		
		private string _Name;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private int _AddressId;
		
		private EntitySet<JobQuote> _JobQuotes;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    #endregion
		
		public Client()
		{
			this._JobQuotes = new EntitySet<JobQuote>(new Action<JobQuote>(this.attach_JobQuotes), new Action<JobQuote>(this.detach_JobQuotes));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_JobQuote", Storage="_JobQuotes", ThisKey="ClientId", OtherKey="ClientId")]
		public EntitySet<JobQuote> JobQuotes
		{
			get
			{
				return this._JobQuotes;
			}
			set
			{
				this._JobQuotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Client", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobQuotes(JobQuote entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_JobQuotes(JobQuote entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyInformation")]
	public partial class CompanyInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private string _CompanyName;
		
		private string _RegistrationNumber;
		
		private int _AddressId;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnRegistrationNumberChanging(string value);
    partial void OnRegistrationNumberChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public CompanyInformation()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string RegistrationNumber
		{
			get
			{
				return this._RegistrationNumber;
			}
			set
			{
				if ((this._RegistrationNumber != value))
				{
					this.OnRegistrationNumberChanging(value);
					this.SendPropertyChanging();
					this._RegistrationNumber = value;
					this.SendPropertyChanged("RegistrationNumber");
					this.OnRegistrationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyInformation_Invoice", Storage="_Invoices", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_CompanyInformation", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.CompanyInformations.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.CompanyInformations.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.CompanyInformation = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.CompanyInformation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _Name;
		
		private string _Surname;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private int _AddressId;
		
		private int _NkId;
		
		private int _GenderId;
		
		private int _EmployeeTypeId;
		
		private EntitySet<EmployeeJobDuration> _EmployeeJobDurations;
		
		private EntitySet<WorkLine> _WorkLines;
		
		private EntityRef<User> _User;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<EmployeeType> _EmployeeType;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<NextOfKin> _NextOfKin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnNkIdChanging(int value);
    partial void OnNkIdChanged();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnEmployeeTypeIdChanging(int value);
    partial void OnEmployeeTypeIdChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeeJobDurations = new EntitySet<EmployeeJobDuration>(new Action<EmployeeJobDuration>(this.attach_EmployeeJobDurations), new Action<EmployeeJobDuration>(this.detach_EmployeeJobDurations));
			this._WorkLines = new EntitySet<WorkLine>(new Action<WorkLine>(this.attach_WorkLines), new Action<WorkLine>(this.detach_WorkLines));
			this._User = default(EntityRef<User>);
			this._Address = default(EntityRef<Address>);
			this._EmployeeType = default(EntityRef<EmployeeType>);
			this._Gender = default(EntityRef<Gender>);
			this._NextOfKin = default(EntityRef<NextOfKin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NkId", DbType="Int NOT NULL")]
		public int NkId
		{
			get
			{
				return this._NkId;
			}
			set
			{
				if ((this._NkId != value))
				{
					if (this._NextOfKin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNkIdChanging(value);
					this.SendPropertyChanging();
					this._NkId = value;
					this.SendPropertyChanged("NkId");
					this.OnNkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderId", DbType="Int NOT NULL")]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTypeId", DbType="Int NOT NULL")]
		public int EmployeeTypeId
		{
			get
			{
				return this._EmployeeTypeId;
			}
			set
			{
				if ((this._EmployeeTypeId != value))
				{
					if (this._EmployeeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTypeId = value;
					this.SendPropertyChanged("EmployeeTypeId");
					this.OnEmployeeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeJobDuration", Storage="_EmployeeJobDurations", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<EmployeeJobDuration> EmployeeJobDurations
		{
			get
			{
				return this._EmployeeJobDurations;
			}
			set
			{
				this._EmployeeJobDurations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkLine", Storage="_WorkLines", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<WorkLine> WorkLines
		{
			get
			{
				return this._WorkLines;
			}
			set
			{
				this._WorkLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_User", Storage="_User", ThisKey="EmployeeId", OtherKey="EmployeeId", IsUnique=true, IsForeignKey=false)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Employee = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Employee", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Employee", Storage="_EmployeeType", ThisKey="EmployeeTypeId", OtherKey="EmployeeTypeId", IsForeignKey=true)]
		public EmployeeType EmployeeType
		{
			get
			{
				return this._EmployeeType.Entity;
			}
			set
			{
				EmployeeType previousValue = this._EmployeeType.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeType.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._EmployeeType.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._EmployeeTypeId = value.EmployeeTypeId;
					}
					else
					{
						this._EmployeeTypeId = default(int);
					}
					this.SendPropertyChanged("EmployeeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Employee", Storage="_Gender", ThisKey="GenderId", OtherKey="GenderId", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._GenderId = value.GenderId;
					}
					else
					{
						this._GenderId = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NextOfKin_Employee", Storage="_NextOfKin", ThisKey="NkId", OtherKey="NkId", IsForeignKey=true)]
		public NextOfKin NextOfKin
		{
			get
			{
				return this._NextOfKin.Entity;
			}
			set
			{
				NextOfKin previousValue = this._NextOfKin.Entity;
				if (((previousValue != value) 
							|| (this._NextOfKin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NextOfKin.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._NextOfKin.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._NkId = value.NkId;
					}
					else
					{
						this._NkId = default(int);
					}
					this.SendPropertyChanged("NextOfKin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeJobDurations(EmployeeJobDuration entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeJobDurations(EmployeeJobDuration entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_WorkLines(WorkLine entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_WorkLines(WorkLine entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeJobDuration")]
	public partial class EmployeeJobDuration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobId;
		
		private int _EmployeeId;
		
		private System.DateTime _TagInTime;
		
		private System.Nullable<System.DateTime> _TagOutTime;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<JobOrder> _JobOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnTagInTimeChanging(System.DateTime value);
    partial void OnTagInTimeChanged();
    partial void OnTagOutTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTagOutTimeChanged();
    #endregion
		
		public EmployeeJobDuration()
		{
			this._Employee = default(EntityRef<Employee>);
			this._JobOrder = default(EntityRef<JobOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._JobOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagInTime", DbType="DateTime NOT NULL")]
		public System.DateTime TagInTime
		{
			get
			{
				return this._TagInTime;
			}
			set
			{
				if ((this._TagInTime != value))
				{
					this.OnTagInTimeChanging(value);
					this.SendPropertyChanging();
					this._TagInTime = value;
					this.SendPropertyChanged("TagInTime");
					this.OnTagInTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagOutTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TagOutTime
		{
			get
			{
				return this._TagOutTime;
			}
			set
			{
				if ((this._TagOutTime != value))
				{
					this.OnTagOutTimeChanging(value);
					this.SendPropertyChanging();
					this._TagOutTime = value;
					this.SendPropertyChanged("TagOutTime");
					this.OnTagOutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeJobDuration", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeJobDurations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeJobDurations.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOrder_EmployeeJobDuration", Storage="_JobOrder", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
		public JobOrder JobOrder
		{
			get
			{
				return this._JobOrder.Entity;
			}
			set
			{
				JobOrder previousValue = this._JobOrder.Entity;
				if (((previousValue != value) 
							|| (this._JobOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobOrder.Entity = null;
						previousValue.EmployeeJobDurations.Remove(this);
					}
					this._JobOrder.Entity = value;
					if ((value != null))
					{
						value.EmployeeJobDurations.Add(this);
						this._JobId = value.JobId;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("JobOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeType")]
	public partial class EmployeeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeTypeId;
		
		private string _Description;
		
		private string _AccessLevel;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeTypeIdChanging(int value);
    partial void OnEmployeeTypeIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAccessLevelChanging(string value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public EmployeeType()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeTypeId
		{
			get
			{
				return this._EmployeeTypeId;
			}
			set
			{
				if ((this._EmployeeTypeId != value))
				{
					this.OnEmployeeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTypeId = value;
					this.SendPropertyChanged("EmployeeTypeId");
					this.OnEmployeeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeType_Employee", Storage="_Employees", ThisKey="EmployeeTypeId", OtherKey="EmployeeTypeId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderId;
		
		private string _GenderName;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnGenderNameChanging(string value);
    partial void OnGenderNameChanged();
    #endregion
		
		public Gender()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderName", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string GenderName
		{
			get
			{
				return this._GenderName;
			}
			set
			{
				if ((this._GenderName != value))
				{
					this.OnGenderNameChanging(value);
					this.SendPropertyChanging();
					this._GenderName = value;
					this.SendPropertyChanged("GenderName");
					this.OnGenderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_Employee", Storage="_Employees", ThisKey="GenderId", OtherKey="GenderId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryId;
		
		private string _InventoryName;
		
		private int _Units;
		
		private float _InventoryPrice;
		
		private string _InventoryDescription;
		
		private EntitySet<InventoryLine> _InventoryLines;
		
		private EntityRef<InventoryWrittenOff> _InventoryWrittenOff;
		
		private EntitySet<OrdersMade> _OrdersMades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryIdChanging(int value);
    partial void OnInventoryIdChanged();
    partial void OnInventoryNameChanging(string value);
    partial void OnInventoryNameChanged();
    partial void OnUnitsChanging(int value);
    partial void OnUnitsChanged();
    partial void OnInventoryPriceChanging(float value);
    partial void OnInventoryPriceChanged();
    partial void OnInventoryDescriptionChanging(string value);
    partial void OnInventoryDescriptionChanged();
    #endregion
		
		public Inventory()
		{
			this._InventoryLines = new EntitySet<InventoryLine>(new Action<InventoryLine>(this.attach_InventoryLines), new Action<InventoryLine>(this.detach_InventoryLines));
			this._InventoryWrittenOff = default(EntityRef<InventoryWrittenOff>);
			this._OrdersMades = new EntitySet<OrdersMade>(new Action<OrdersMade>(this.attach_OrdersMades), new Action<OrdersMade>(this.detach_OrdersMades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string InventoryName
		{
			get
			{
				return this._InventoryName;
			}
			set
			{
				if ((this._InventoryName != value))
				{
					this.OnInventoryNameChanging(value);
					this.SendPropertyChanging();
					this._InventoryName = value;
					this.SendPropertyChanged("InventoryName");
					this.OnInventoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="Int NOT NULL")]
		public int Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryPrice", DbType="Real NOT NULL")]
		public float InventoryPrice
		{
			get
			{
				return this._InventoryPrice;
			}
			set
			{
				if ((this._InventoryPrice != value))
				{
					this.OnInventoryPriceChanging(value);
					this.SendPropertyChanging();
					this._InventoryPrice = value;
					this.SendPropertyChanged("InventoryPrice");
					this.OnInventoryPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryDescription", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string InventoryDescription
		{
			get
			{
				return this._InventoryDescription;
			}
			set
			{
				if ((this._InventoryDescription != value))
				{
					this.OnInventoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._InventoryDescription = value;
					this.SendPropertyChanged("InventoryDescription");
					this.OnInventoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryLine", Storage="_InventoryLines", ThisKey="InventoryId", OtherKey="InventoryId")]
		public EntitySet<InventoryLine> InventoryLines
		{
			get
			{
				return this._InventoryLines;
			}
			set
			{
				this._InventoryLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryWrittenOff", Storage="_InventoryWrittenOff", ThisKey="InventoryId", OtherKey="InventoryId", IsUnique=true, IsForeignKey=false)]
		public InventoryWrittenOff InventoryWrittenOff
		{
			get
			{
				return this._InventoryWrittenOff.Entity;
			}
			set
			{
				InventoryWrittenOff previousValue = this._InventoryWrittenOff.Entity;
				if (((previousValue != value) 
							|| (this._InventoryWrittenOff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InventoryWrittenOff.Entity = null;
						previousValue.Inventory = null;
					}
					this._InventoryWrittenOff.Entity = value;
					if ((value != null))
					{
						value.Inventory = this;
					}
					this.SendPropertyChanged("InventoryWrittenOff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_OrdersMade", Storage="_OrdersMades", ThisKey="InventoryId", OtherKey="InventoryId")]
		public EntitySet<OrdersMade> OrdersMades
		{
			get
			{
				return this._OrdersMades;
			}
			set
			{
				this._OrdersMades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryLines(InventoryLine entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_InventoryLines(InventoryLine entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
		
		private void attach_OrdersMades(OrdersMade entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = this;
		}
		
		private void detach_OrdersMades(OrdersMade entity)
		{
			this.SendPropertyChanging();
			entity.Inventory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryLine")]
	public partial class InventoryLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryId;
		
		private int _QuoteId;
		
		private string _Quantity;
		
		private EntityRef<Inventory> _Inventory;
		
		private EntityRef<JobQuote> _JobQuote;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryIdChanging(int value);
    partial void OnInventoryIdChanged();
    partial void OnQuoteIdChanging(int value);
    partial void OnQuoteIdChanged();
    partial void OnQuantityChanging(string value);
    partial void OnQuantityChanged();
    #endregion
		
		public InventoryLine()
		{
			this._Inventory = default(EntityRef<Inventory>);
			this._JobQuote = default(EntityRef<JobQuote>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuoteId
		{
			get
			{
				return this._QuoteId;
			}
			set
			{
				if ((this._QuoteId != value))
				{
					if (this._JobQuote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteIdChanging(value);
					this.SendPropertyChanging();
					this._QuoteId = value;
					this.SendPropertyChanged("QuoteId");
					this.OnQuoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryLine", Storage="_Inventory", ThisKey="InventoryId", OtherKey="InventoryId", IsForeignKey=true)]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.InventoryLines.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.InventoryLines.Add(this);
						this._InventoryId = value.InventoryId;
					}
					else
					{
						this._InventoryId = default(int);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobQuote_InventoryLine", Storage="_JobQuote", ThisKey="QuoteId", OtherKey="QuoteId", IsForeignKey=true)]
		public JobQuote JobQuote
		{
			get
			{
				return this._JobQuote.Entity;
			}
			set
			{
				JobQuote previousValue = this._JobQuote.Entity;
				if (((previousValue != value) 
							|| (this._JobQuote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobQuote.Entity = null;
						previousValue.InventoryLines.Remove(this);
					}
					this._JobQuote.Entity = value;
					if ((value != null))
					{
						value.InventoryLines.Add(this);
						this._QuoteId = value.QuoteId;
					}
					else
					{
						this._QuoteId = default(int);
					}
					this.SendPropertyChanged("JobQuote");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryWrittenOff")]
	public partial class InventoryWrittenOff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InventoryId;
		
		private string _Description;
		
		private System.DateTime _Date;
		
		private EntityRef<Inventory> _Inventory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInventoryIdChanging(int value);
    partial void OnInventoryIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public InventoryWrittenOff()
		{
			this._Inventory = default(EntityRef<Inventory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_InventoryWrittenOff", Storage="_Inventory", ThisKey="InventoryId", OtherKey="InventoryId", IsForeignKey=true)]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.InventoryWrittenOff = null;
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.InventoryWrittenOff = this;
						this._InventoryId = value.InventoryId;
					}
					else
					{
						this._InventoryId = default(int);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceId;
		
		private int _JobId;
		
		private int _VatId;
		
		private float _Cost;
		
		private System.DateTime _DateTime;
		
		private int _BankingDetailsId;
		
		private int _CompanyId;
		
		private EntitySet<JobOrder> _JobOrders;
		
		private EntityRef<BankingDetail> _BankingDetail;
		
		private EntityRef<CompanyInformation> _CompanyInformation;
		
		private EntityRef<VAT> _VAT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIdChanging(int value);
    partial void OnInvoiceIdChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnVatIdChanging(int value);
    partial void OnVatIdChanged();
    partial void OnCostChanging(float value);
    partial void OnCostChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnBankingDetailsIdChanging(int value);
    partial void OnBankingDetailsIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    #endregion
		
		public Invoice()
		{
			this._JobOrders = new EntitySet<JobOrder>(new Action<JobOrder>(this.attach_JobOrders), new Action<JobOrder>(this.detach_JobOrders));
			this._BankingDetail = default(EntityRef<BankingDetail>);
			this._CompanyInformation = default(EntityRef<CompanyInformation>);
			this._VAT = default(EntityRef<VAT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL")]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatId", DbType="Int NOT NULL")]
		public int VatId
		{
			get
			{
				return this._VatId;
			}
			set
			{
				if ((this._VatId != value))
				{
					if (this._VAT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVatIdChanging(value);
					this.SendPropertyChanging();
					this._VatId = value;
					this.SendPropertyChanged("VatId");
					this.OnVatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Real NOT NULL")]
		public float Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="Date NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankingDetailsId", DbType="Int NOT NULL")]
		public int BankingDetailsId
		{
			get
			{
				return this._BankingDetailsId;
			}
			set
			{
				if ((this._BankingDetailsId != value))
				{
					if (this._BankingDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankingDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._BankingDetailsId = value;
					this.SendPropertyChanged("BankingDetailsId");
					this.OnBankingDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_JobOrder", Storage="_JobOrders", ThisKey="InvoiceId", OtherKey="InvoiceId")]
		public EntitySet<JobOrder> JobOrders
		{
			get
			{
				return this._JobOrders;
			}
			set
			{
				this._JobOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankingDetail_Invoice", Storage="_BankingDetail", ThisKey="BankingDetailsId", OtherKey="BankDetailsId", IsForeignKey=true)]
		public BankingDetail BankingDetail
		{
			get
			{
				return this._BankingDetail.Entity;
			}
			set
			{
				BankingDetail previousValue = this._BankingDetail.Entity;
				if (((previousValue != value) 
							|| (this._BankingDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankingDetail.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._BankingDetail.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._BankingDetailsId = value.BankDetailsId;
					}
					else
					{
						this._BankingDetailsId = default(int);
					}
					this.SendPropertyChanged("BankingDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyInformation_Invoice", Storage="_CompanyInformation", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public CompanyInformation CompanyInformation
		{
			get
			{
				return this._CompanyInformation.Entity;
			}
			set
			{
				CompanyInformation previousValue = this._CompanyInformation.Entity;
				if (((previousValue != value) 
							|| (this._CompanyInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyInformation.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._CompanyInformation.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CompanyInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VAT_Invoice", Storage="_VAT", ThisKey="VatId", OtherKey="VatID", IsForeignKey=true)]
		public VAT VAT
		{
			get
			{
				return this._VAT.Entity;
			}
			set
			{
				VAT previousValue = this._VAT.Entity;
				if (((previousValue != value) 
							|| (this._VAT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VAT.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._VAT.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._VatId = value.VatID;
					}
					else
					{
						this._VatId = default(int);
					}
					this.SendPropertyChanged("VAT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoicePayment")]
	public partial class InvoicePayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentId;
		
		private int _SupplierInvoiceId;
		
		private System.DateTime _PaymentDate;
		
		private float _AmountPaid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIdChanging(int value);
    partial void OnPaymentIdChanged();
    partial void OnSupplierInvoiceIdChanging(int value);
    partial void OnSupplierInvoiceIdChanged();
    partial void OnPaymentDateChanging(System.DateTime value);
    partial void OnPaymentDateChanged();
    partial void OnAmountPaidChanging(float value);
    partial void OnAmountPaidChanged();
    #endregion
		
		public InvoicePayment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierInvoiceId", DbType="Int NOT NULL")]
		public int SupplierInvoiceId
		{
			get
			{
				return this._SupplierInvoiceId;
			}
			set
			{
				if ((this._SupplierInvoiceId != value))
				{
					this.OnSupplierInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierInvoiceId = value;
					this.SendPropertyChanged("SupplierInvoiceId");
					this.OnSupplierInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="Date NOT NULL")]
		public System.DateTime PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPaid", DbType="Real NOT NULL")]
		public float AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobOrder")]
	public partial class JobOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobId;
		
		private int _QuoteId;
		
		private string _JobStatusId;
		
		private System.Nullable<int> _InvoiceId;
		
		private System.Nullable<int> _EmployeeId;
		
		private string _JobTitle;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<EmployeeJobDuration> _EmployeeJobDurations;
		
		private EntitySet<WorkLine> _WorkLines;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<JobOrderStatus> _JobOrderStatus;
		
		private EntityRef<JobQuote> _JobQuote;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnQuoteIdChanging(int value);
    partial void OnQuoteIdChanged();
    partial void OnJobStatusIdChanging(string value);
    partial void OnJobStatusIdChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public JobOrder()
		{
			this._EmployeeJobDurations = new EntitySet<EmployeeJobDuration>(new Action<EmployeeJobDuration>(this.attach_EmployeeJobDurations), new Action<EmployeeJobDuration>(this.detach_EmployeeJobDurations));
			this._WorkLines = new EntitySet<WorkLine>(new Action<WorkLine>(this.attach_WorkLines), new Action<WorkLine>(this.detach_WorkLines));
			this._Invoice = default(EntityRef<Invoice>);
			this._JobOrderStatus = default(EntityRef<JobOrderStatus>);
			this._JobQuote = default(EntityRef<JobQuote>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteId", DbType="Int NOT NULL")]
		public int QuoteId
		{
			get
			{
				return this._QuoteId;
			}
			set
			{
				if ((this._QuoteId != value))
				{
					if (this._JobQuote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteIdChanging(value);
					this.SendPropertyChanging();
					this._QuoteId = value;
					this.SendPropertyChanged("QuoteId");
					this.OnQuoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStatusId", DbType="Char(10)")]
		public string JobStatusId
		{
			get
			{
				return this._JobStatusId;
			}
			set
			{
				if ((this._JobStatusId != value))
				{
					if (this._JobOrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobStatusIdChanging(value);
					this.SendPropertyChanging();
					this._JobStatusId = value;
					this.SendPropertyChanged("JobStatusId");
					this.OnJobStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="Char(25)")]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOrder_EmployeeJobDuration", Storage="_EmployeeJobDurations", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<EmployeeJobDuration> EmployeeJobDurations
		{
			get
			{
				return this._EmployeeJobDurations;
			}
			set
			{
				this._EmployeeJobDurations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOrder_WorkLine", Storage="_WorkLines", ThisKey="JobId", OtherKey="JobId")]
		public EntitySet<WorkLine> WorkLines
		{
			get
			{
				return this._WorkLines;
			}
			set
			{
				this._WorkLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_JobOrder", Storage="_Invoice", ThisKey="InvoiceId", OtherKey="InvoiceId", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.JobOrders.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.JobOrders.Add(this);
						this._InvoiceId = value.InvoiceId;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOrderStatus_JobOrder", Storage="_JobOrderStatus", ThisKey="JobStatusId", OtherKey="StatusId", IsForeignKey=true)]
		public JobOrderStatus JobOrderStatus
		{
			get
			{
				return this._JobOrderStatus.Entity;
			}
			set
			{
				JobOrderStatus previousValue = this._JobOrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._JobOrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobOrderStatus.Entity = null;
						previousValue.JobOrders.Remove(this);
					}
					this._JobOrderStatus.Entity = value;
					if ((value != null))
					{
						value.JobOrders.Add(this);
						this._JobStatusId = value.StatusId;
					}
					else
					{
						this._JobStatusId = default(string);
					}
					this.SendPropertyChanged("JobOrderStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobQuote_JobOrder", Storage="_JobQuote", ThisKey="QuoteId", OtherKey="QuoteId", IsForeignKey=true)]
		public JobQuote JobQuote
		{
			get
			{
				return this._JobQuote.Entity;
			}
			set
			{
				JobQuote previousValue = this._JobQuote.Entity;
				if (((previousValue != value) 
							|| (this._JobQuote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobQuote.Entity = null;
						previousValue.JobOrders.Remove(this);
					}
					this._JobQuote.Entity = value;
					if ((value != null))
					{
						value.JobOrders.Add(this);
						this._QuoteId = value.QuoteId;
					}
					else
					{
						this._QuoteId = default(int);
					}
					this.SendPropertyChanged("JobQuote");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeJobDurations(EmployeeJobDuration entity)
		{
			this.SendPropertyChanging();
			entity.JobOrder = this;
		}
		
		private void detach_EmployeeJobDurations(EmployeeJobDuration entity)
		{
			this.SendPropertyChanging();
			entity.JobOrder = null;
		}
		
		private void attach_WorkLines(WorkLine entity)
		{
			this.SendPropertyChanging();
			entity.JobOrder = this;
		}
		
		private void detach_WorkLines(WorkLine entity)
		{
			this.SendPropertyChanging();
			entity.JobOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobOrderStatus")]
	public partial class JobOrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StatusId;
		
		private string _Description;
		
		private EntitySet<JobOrder> _JobOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIdChanging(string value);
    partial void OnStatusIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public JobOrderStatus()
		{
			this._JobOrders = new EntitySet<JobOrder>(new Action<JobOrder>(this.attach_JobOrders), new Action<JobOrder>(this.detach_JobOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Char(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOrderStatus_JobOrder", Storage="_JobOrders", ThisKey="StatusId", OtherKey="JobStatusId")]
		public EntitySet<JobOrder> JobOrders
		{
			get
			{
				return this._JobOrders;
			}
			set
			{
				this._JobOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.JobOrderStatus = this;
		}
		
		private void detach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.JobOrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobQuote")]
	public partial class JobQuote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuoteId;
		
		private float _QuoteCost;
		
		private System.DateTime _QuoteDate;
		
		private string _QuoteDescription;
		
		private int _ClientId;
		
		private string _QuoteStatus;
		
		private EntitySet<InventoryLine> _InventoryLines;
		
		private EntitySet<JobOrder> _JobOrders;
		
		private EntitySet<ServiceLine> _ServiceLines;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuoteIdChanging(int value);
    partial void OnQuoteIdChanged();
    partial void OnQuoteCostChanging(float value);
    partial void OnQuoteCostChanged();
    partial void OnQuoteDateChanging(System.DateTime value);
    partial void OnQuoteDateChanged();
    partial void OnQuoteDescriptionChanging(string value);
    partial void OnQuoteDescriptionChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnQuoteStatusChanging(string value);
    partial void OnQuoteStatusChanged();
    #endregion
		
		public JobQuote()
		{
			this._InventoryLines = new EntitySet<InventoryLine>(new Action<InventoryLine>(this.attach_InventoryLines), new Action<InventoryLine>(this.detach_InventoryLines));
			this._JobOrders = new EntitySet<JobOrder>(new Action<JobOrder>(this.attach_JobOrders), new Action<JobOrder>(this.detach_JobOrders));
			this._ServiceLines = new EntitySet<ServiceLine>(new Action<ServiceLine>(this.attach_ServiceLines), new Action<ServiceLine>(this.detach_ServiceLines));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuoteId
		{
			get
			{
				return this._QuoteId;
			}
			set
			{
				if ((this._QuoteId != value))
				{
					this.OnQuoteIdChanging(value);
					this.SendPropertyChanging();
					this._QuoteId = value;
					this.SendPropertyChanged("QuoteId");
					this.OnQuoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteCost", DbType="Real NOT NULL")]
		public float QuoteCost
		{
			get
			{
				return this._QuoteCost;
			}
			set
			{
				if ((this._QuoteCost != value))
				{
					this.OnQuoteCostChanging(value);
					this.SendPropertyChanging();
					this._QuoteCost = value;
					this.SendPropertyChanged("QuoteCost");
					this.OnQuoteCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteDate", DbType="Date NOT NULL")]
		public System.DateTime QuoteDate
		{
			get
			{
				return this._QuoteDate;
			}
			set
			{
				if ((this._QuoteDate != value))
				{
					this.OnQuoteDateChanging(value);
					this.SendPropertyChanging();
					this._QuoteDate = value;
					this.SendPropertyChanged("QuoteDate");
					this.OnQuoteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteDescription", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string QuoteDescription
		{
			get
			{
				return this._QuoteDescription;
			}
			set
			{
				if ((this._QuoteDescription != value))
				{
					this.OnQuoteDescriptionChanging(value);
					this.SendPropertyChanging();
					this._QuoteDescription = value;
					this.SendPropertyChanged("QuoteDescription");
					this.OnQuoteDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteStatus", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string QuoteStatus
		{
			get
			{
				return this._QuoteStatus;
			}
			set
			{
				if ((this._QuoteStatus != value))
				{
					this.OnQuoteStatusChanging(value);
					this.SendPropertyChanging();
					this._QuoteStatus = value;
					this.SendPropertyChanged("QuoteStatus");
					this.OnQuoteStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobQuote_InventoryLine", Storage="_InventoryLines", ThisKey="QuoteId", OtherKey="QuoteId")]
		public EntitySet<InventoryLine> InventoryLines
		{
			get
			{
				return this._InventoryLines;
			}
			set
			{
				this._InventoryLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobQuote_JobOrder", Storage="_JobOrders", ThisKey="QuoteId", OtherKey="QuoteId")]
		public EntitySet<JobOrder> JobOrders
		{
			get
			{
				return this._JobOrders;
			}
			set
			{
				this._JobOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobQuote_ServiceLine", Storage="_ServiceLines", ThisKey="QuoteId", OtherKey="QuoteId")]
		public EntitySet<ServiceLine> ServiceLines
		{
			get
			{
				return this._ServiceLines;
			}
			set
			{
				this._ServiceLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_JobQuote", Storage="_Client", ThisKey="ClientId", OtherKey="ClientId", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.JobQuotes.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.JobQuotes.Add(this);
						this._ClientId = value.ClientId;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InventoryLines(InventoryLine entity)
		{
			this.SendPropertyChanging();
			entity.JobQuote = this;
		}
		
		private void detach_InventoryLines(InventoryLine entity)
		{
			this.SendPropertyChanging();
			entity.JobQuote = null;
		}
		
		private void attach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.JobQuote = this;
		}
		
		private void detach_JobOrders(JobOrder entity)
		{
			this.SendPropertyChanging();
			entity.JobQuote = null;
		}
		
		private void attach_ServiceLines(ServiceLine entity)
		{
			this.SendPropertyChanging();
			entity.JobQuote = this;
		}
		
		private void detach_ServiceLines(ServiceLine entity)
		{
			this.SendPropertyChanging();
			entity.JobQuote = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NextOfKin")]
	public partial class NextOfKin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NkId;
		
		private string _NkName;
		
		private string _NkPhoneNumber;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNkIdChanging(int value);
    partial void OnNkIdChanged();
    partial void OnNkNameChanging(string value);
    partial void OnNkNameChanged();
    partial void OnNkPhoneNumberChanging(string value);
    partial void OnNkPhoneNumberChanged();
    #endregion
		
		public NextOfKin()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NkId
		{
			get
			{
				return this._NkId;
			}
			set
			{
				if ((this._NkId != value))
				{
					this.OnNkIdChanging(value);
					this.SendPropertyChanging();
					this._NkId = value;
					this.SendPropertyChanged("NkId");
					this.OnNkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NkName", DbType="Char(25) NOT NULL", CanBeNull=false)]
		public string NkName
		{
			get
			{
				return this._NkName;
			}
			set
			{
				if ((this._NkName != value))
				{
					this.OnNkNameChanging(value);
					this.SendPropertyChanging();
					this._NkName = value;
					this.SendPropertyChanged("NkName");
					this.OnNkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NkPhoneNumber", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string NkPhoneNumber
		{
			get
			{
				return this._NkPhoneNumber;
			}
			set
			{
				if ((this._NkPhoneNumber != value))
				{
					this.OnNkPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._NkPhoneNumber = value;
					this.SendPropertyChanged("NkPhoneNumber");
					this.OnNkPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NextOfKin_Employee", Storage="_Employees", ThisKey="NkId", OtherKey="NkId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.NextOfKin = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.NextOfKin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceId;
		
		private string _ServiceName;
		
		private string _ServiceDescription;
		
		private float _ServicePricePerHour;
		
		private EntitySet<ServiceLine> _ServiceLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnServiceDescriptionChanging(string value);
    partial void OnServiceDescriptionChanged();
    partial void OnServicePricePerHourChanging(float value);
    partial void OnServicePricePerHourChanged();
    #endregion
		
		public Service()
		{
			this._ServiceLines = new EntitySet<ServiceLine>(new Action<ServiceLine>(this.attach_ServiceLines), new Action<ServiceLine>(this.detach_ServiceLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceDescription", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string ServiceDescription
		{
			get
			{
				return this._ServiceDescription;
			}
			set
			{
				if ((this._ServiceDescription != value))
				{
					this.OnServiceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ServiceDescription = value;
					this.SendPropertyChanged("ServiceDescription");
					this.OnServiceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicePricePerHour", DbType="Real NOT NULL")]
		public float ServicePricePerHour
		{
			get
			{
				return this._ServicePricePerHour;
			}
			set
			{
				if ((this._ServicePricePerHour != value))
				{
					this.OnServicePricePerHourChanging(value);
					this.SendPropertyChanging();
					this._ServicePricePerHour = value;
					this.SendPropertyChanged("ServicePricePerHour");
					this.OnServicePricePerHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceLine", Storage="_ServiceLines", ThisKey="ServiceId", OtherKey="ServiceId")]
		public EntitySet<ServiceLine> ServiceLines
		{
			get
			{
				return this._ServiceLines;
			}
			set
			{
				this._ServiceLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceLines(ServiceLine entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceLines(ServiceLine entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrdersMade")]
	public partial class OrdersMade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private int _InventoryId;
		
		private int _SupplierId;
		
		private int _Quantity;
		
		private int _SupplierOrderStatusId;
		
		private System.DateTime _OrderDate;
		
		private System.Nullable<System.DateTime> _DateReceived;
		
		private EntitySet<SupplierInvoice> _SupplierInvoices;
		
		private EntityRef<Inventory> _Inventory;
		
		private EntityRef<Supplier> _Supplier;
		
		private EntityRef<SupplierOrderStatus> _SupplierOrderStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnInventoryIdChanging(int value);
    partial void OnInventoryIdChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnSupplierOrderStatusIdChanging(int value);
    partial void OnSupplierOrderStatusIdChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnDateReceivedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReceivedChanged();
    #endregion
		
		public OrdersMade()
		{
			this._SupplierInvoices = new EntitySet<SupplierInvoice>(new Action<SupplierInvoice>(this.attach_SupplierInvoices), new Action<SupplierInvoice>(this.detach_SupplierInvoices));
			this._Inventory = default(EntityRef<Inventory>);
			this._Supplier = default(EntityRef<Supplier>);
			this._SupplierOrderStatus = default(EntityRef<SupplierOrderStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InventoryId", DbType="Int NOT NULL")]
		public int InventoryId
		{
			get
			{
				return this._InventoryId;
			}
			set
			{
				if ((this._InventoryId != value))
				{
					if (this._Inventory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInventoryIdChanging(value);
					this.SendPropertyChanging();
					this._InventoryId = value;
					this.SendPropertyChanged("InventoryId");
					this.OnInventoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int NOT NULL")]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierOrderStatusId", DbType="Int NOT NULL")]
		public int SupplierOrderStatusId
		{
			get
			{
				return this._SupplierOrderStatusId;
			}
			set
			{
				if ((this._SupplierOrderStatusId != value))
				{
					if (this._SupplierOrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierOrderStatusId = value;
					this.SendPropertyChanged("SupplierOrderStatusId");
					this.OnSupplierOrderStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReceived", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReceived
		{
			get
			{
				return this._DateReceived;
			}
			set
			{
				if ((this._DateReceived != value))
				{
					this.OnDateReceivedChanging(value);
					this.SendPropertyChanging();
					this._DateReceived = value;
					this.SendPropertyChanged("DateReceived");
					this.OnDateReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrdersMade_SupplierInvoice", Storage="_SupplierInvoices", ThisKey="OrderId", OtherKey="OrderId")]
		public EntitySet<SupplierInvoice> SupplierInvoices
		{
			get
			{
				return this._SupplierInvoices;
			}
			set
			{
				this._SupplierInvoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inventory_OrdersMade", Storage="_Inventory", ThisKey="InventoryId", OtherKey="InventoryId", IsForeignKey=true)]
		public Inventory Inventory
		{
			get
			{
				return this._Inventory.Entity;
			}
			set
			{
				Inventory previousValue = this._Inventory.Entity;
				if (((previousValue != value) 
							|| (this._Inventory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inventory.Entity = null;
						previousValue.OrdersMades.Remove(this);
					}
					this._Inventory.Entity = value;
					if ((value != null))
					{
						value.OrdersMades.Add(this);
						this._InventoryId = value.InventoryId;
					}
					else
					{
						this._InventoryId = default(int);
					}
					this.SendPropertyChanged("Inventory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_OrdersMade", Storage="_Supplier", ThisKey="SupplierId", OtherKey="SupplierId", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.OrdersMades.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.OrdersMades.Add(this);
						this._SupplierId = value.SupplierId;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplierOrderStatus_OrdersMade", Storage="_SupplierOrderStatus", ThisKey="SupplierOrderStatusId", OtherKey="SupplierOrderStatusId", IsForeignKey=true)]
		public SupplierOrderStatus SupplierOrderStatus
		{
			get
			{
				return this._SupplierOrderStatus.Entity;
			}
			set
			{
				SupplierOrderStatus previousValue = this._SupplierOrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._SupplierOrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplierOrderStatus.Entity = null;
						previousValue.OrdersMades.Remove(this);
					}
					this._SupplierOrderStatus.Entity = value;
					if ((value != null))
					{
						value.OrdersMades.Add(this);
						this._SupplierOrderStatusId = value.SupplierOrderStatusId;
					}
					else
					{
						this._SupplierOrderStatusId = default(int);
					}
					this.SendPropertyChanged("SupplierOrderStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupplierInvoices(SupplierInvoice entity)
		{
			this.SendPropertyChanging();
			entity.OrdersMade = this;
		}
		
		private void detach_SupplierInvoices(SupplierInvoice entity)
		{
			this.SendPropertyChanging();
			entity.OrdersMade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceLine")]
	public partial class ServiceLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuoteId;
		
		private int _ServiceId;
		
		private int _Hours;
		
		private EntityRef<JobQuote> _JobQuote;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuoteIdChanging(int value);
    partial void OnQuoteIdChanged();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnHoursChanging(int value);
    partial void OnHoursChanged();
    #endregion
		
		public ServiceLine()
		{
			this._JobQuote = default(EntityRef<JobQuote>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuoteId
		{
			get
			{
				return this._QuoteId;
			}
			set
			{
				if ((this._QuoteId != value))
				{
					if (this._JobQuote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteIdChanging(value);
					this.SendPropertyChanging();
					this._QuoteId = value;
					this.SendPropertyChanged("QuoteId");
					this.OnQuoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hours", DbType="Int NOT NULL")]
		public int Hours
		{
			get
			{
				return this._Hours;
			}
			set
			{
				if ((this._Hours != value))
				{
					this.OnHoursChanging(value);
					this.SendPropertyChanging();
					this._Hours = value;
					this.SendPropertyChanged("Hours");
					this.OnHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobQuote_ServiceLine", Storage="_JobQuote", ThisKey="QuoteId", OtherKey="QuoteId", IsForeignKey=true)]
		public JobQuote JobQuote
		{
			get
			{
				return this._JobQuote.Entity;
			}
			set
			{
				JobQuote previousValue = this._JobQuote.Entity;
				if (((previousValue != value) 
							|| (this._JobQuote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobQuote.Entity = null;
						previousValue.ServiceLines.Remove(this);
					}
					this._JobQuote.Entity = value;
					if ((value != null))
					{
						value.ServiceLines.Add(this);
						this._QuoteId = value.QuoteId;
					}
					else
					{
						this._QuoteId = default(int);
					}
					this.SendPropertyChanged("JobQuote");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceLine", Storage="_Service", ThisKey="ServiceId", OtherKey="ServiceId", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceLines.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceLines.Add(this);
						this._ServiceId = value.ServiceId;
					}
					else
					{
						this._ServiceId = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierId;
		
		private string _SupplierName;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private int _AddressId;
		
		private int _BankDetailsId;
		
		private EntitySet<OrdersMade> _OrdersMades;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<BankingDetail> _BankingDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnSupplierNameChanging(string value);
    partial void OnSupplierNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnBankDetailsIdChanging(int value);
    partial void OnBankDetailsIdChanged();
    #endregion
		
		public Supplier()
		{
			this._OrdersMades = new EntitySet<OrdersMade>(new Action<OrdersMade>(this.attach_OrdersMades), new Action<OrdersMade>(this.detach_OrdersMades));
			this._Address = default(EntityRef<Address>);
			this._BankingDetail = default(EntityRef<BankingDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this.OnSupplierNameChanging(value);
					this.SendPropertyChanging();
					this._SupplierName = value;
					this.SendPropertyChanged("SupplierName");
					this.OnSupplierNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankDetailsId", DbType="Int NOT NULL")]
		public int BankDetailsId
		{
			get
			{
				return this._BankDetailsId;
			}
			set
			{
				if ((this._BankDetailsId != value))
				{
					if (this._BankingDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._BankDetailsId = value;
					this.SendPropertyChanged("BankDetailsId");
					this.OnBankDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_OrdersMade", Storage="_OrdersMades", ThisKey="SupplierId", OtherKey="SupplierId")]
		public EntitySet<OrdersMade> OrdersMades
		{
			get
			{
				return this._OrdersMades;
			}
			set
			{
				this._OrdersMades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Supplier", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankingDetail_Supplier", Storage="_BankingDetail", ThisKey="BankDetailsId", OtherKey="BankDetailsId", IsForeignKey=true)]
		public BankingDetail BankingDetail
		{
			get
			{
				return this._BankingDetail.Entity;
			}
			set
			{
				BankingDetail previousValue = this._BankingDetail.Entity;
				if (((previousValue != value) 
							|| (this._BankingDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankingDetail.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._BankingDetail.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._BankDetailsId = value.BankDetailsId;
					}
					else
					{
						this._BankDetailsId = default(int);
					}
					this.SendPropertyChanged("BankingDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrdersMades(OrdersMade entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_OrdersMades(OrdersMade entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupplierInvoice")]
	public partial class SupplierInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierInvoiceId;
		
		private int _OrderId;
		
		private int _BankDetailsId;
		
		private float _Cost;
		
		private System.DateTime _DateTime;
		
		private EntityRef<BankingDetail> _BankingDetail;
		
		private EntityRef<OrdersMade> _OrdersMade;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierInvoiceIdChanging(int value);
    partial void OnSupplierInvoiceIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnBankDetailsIdChanging(int value);
    partial void OnBankDetailsIdChanged();
    partial void OnCostChanging(float value);
    partial void OnCostChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public SupplierInvoice()
		{
			this._BankingDetail = default(EntityRef<BankingDetail>);
			this._OrdersMade = default(EntityRef<OrdersMade>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierInvoiceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierInvoiceId
		{
			get
			{
				return this._SupplierInvoiceId;
			}
			set
			{
				if ((this._SupplierInvoiceId != value))
				{
					this.OnSupplierInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierInvoiceId = value;
					this.SendPropertyChanged("SupplierInvoiceId");
					this.OnSupplierInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._OrdersMade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankDetailsId", DbType="Int NOT NULL")]
		public int BankDetailsId
		{
			get
			{
				return this._BankDetailsId;
			}
			set
			{
				if ((this._BankDetailsId != value))
				{
					if (this._BankingDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._BankDetailsId = value;
					this.SendPropertyChanged("BankDetailsId");
					this.OnBankDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Real NOT NULL")]
		public float Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankingDetail_SupplierInvoice", Storage="_BankingDetail", ThisKey="BankDetailsId", OtherKey="BankDetailsId", IsForeignKey=true)]
		public BankingDetail BankingDetail
		{
			get
			{
				return this._BankingDetail.Entity;
			}
			set
			{
				BankingDetail previousValue = this._BankingDetail.Entity;
				if (((previousValue != value) 
							|| (this._BankingDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankingDetail.Entity = null;
						previousValue.SupplierInvoices.Remove(this);
					}
					this._BankingDetail.Entity = value;
					if ((value != null))
					{
						value.SupplierInvoices.Add(this);
						this._BankDetailsId = value.BankDetailsId;
					}
					else
					{
						this._BankDetailsId = default(int);
					}
					this.SendPropertyChanged("BankingDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrdersMade_SupplierInvoice", Storage="_OrdersMade", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true)]
		public OrdersMade OrdersMade
		{
			get
			{
				return this._OrdersMade.Entity;
			}
			set
			{
				OrdersMade previousValue = this._OrdersMade.Entity;
				if (((previousValue != value) 
							|| (this._OrdersMade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrdersMade.Entity = null;
						previousValue.SupplierInvoices.Remove(this);
					}
					this._OrdersMade.Entity = value;
					if ((value != null))
					{
						value.SupplierInvoices.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("OrdersMade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupplierOrderStatus")]
	public partial class SupplierOrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierOrderStatusId;
		
		private string _Description;
		
		private EntitySet<OrdersMade> _OrdersMades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierOrderStatusIdChanging(int value);
    partial void OnSupplierOrderStatusIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SupplierOrderStatus()
		{
			this._OrdersMades = new EntitySet<OrdersMade>(new Action<OrdersMade>(this.attach_OrdersMades), new Action<OrdersMade>(this.detach_OrdersMades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierOrderStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierOrderStatusId
		{
			get
			{
				return this._SupplierOrderStatusId;
			}
			set
			{
				if ((this._SupplierOrderStatusId != value))
				{
					this.OnSupplierOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierOrderStatusId = value;
					this.SendPropertyChanged("SupplierOrderStatusId");
					this.OnSupplierOrderStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplierOrderStatus_OrdersMade", Storage="_OrdersMades", ThisKey="SupplierOrderStatusId", OtherKey="SupplierOrderStatusId")]
		public EntitySet<OrdersMade> OrdersMades
		{
			get
			{
				return this._OrdersMades;
			}
			set
			{
				this._OrdersMades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrdersMades(OrdersMade entity)
		{
			this.SendPropertyChanging();
			entity.SupplierOrderStatus = this;
		}
		
		private void detach_OrdersMades(OrdersMade entity)
		{
			this.SendPropertyChanging();
			entity.SupplierOrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkLine")]
	public partial class WorkLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobId;
		
		private int _EmployeeId;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<JobOrder> _JobOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public WorkLine()
		{
			this._Employee = default(EntityRef<Employee>);
			this._JobOrder = default(EntityRef<JobOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._JobOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkLine", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.WorkLines.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.WorkLines.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobOrder_WorkLine", Storage="_JobOrder", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
		public JobOrder JobOrder
		{
			get
			{
				return this._JobOrder.Entity;
			}
			set
			{
				JobOrder previousValue = this._JobOrder.Entity;
				if (((previousValue != value) 
							|| (this._JobOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobOrder.Entity = null;
						previousValue.WorkLines.Remove(this);
					}
					this._JobOrder.Entity = value;
					if ((value != null))
					{
						value.WorkLines.Add(this);
						this._JobId = value.JobId;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("JobOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VAT")]
	public partial class VAT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VatID;
		
		private float _VatValue;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVatIDChanging(int value);
    partial void OnVatIDChanged();
    partial void OnVatValueChanging(float value);
    partial void OnVatValueChanged();
    #endregion
		
		public VAT()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VatID
		{
			get
			{
				return this._VatID;
			}
			set
			{
				if ((this._VatID != value))
				{
					this.OnVatIDChanging(value);
					this.SendPropertyChanging();
					this._VatID = value;
					this.SendPropertyChanged("VatID");
					this.OnVatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatValue", DbType="Real NOT NULL")]
		public float VatValue
		{
			get
			{
				return this._VatValue;
			}
			set
			{
				if ((this._VatValue != value))
				{
					this.OnVatValueChanging(value);
					this.SendPropertyChanging();
					this._VatValue = value;
					this.SendPropertyChanged("VatValue");
					this.OnVatValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VAT_Invoice", Storage="_Invoices", ThisKey="VatID", OtherKey="VatId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.VAT = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.VAT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLog")]
	public partial class UserLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private System.DateTime _LogInTime;
		
		private System.DateTime _LogOutTime;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnLogInTimeChanging(System.DateTime value);
    partial void OnLogInTimeChanged();
    partial void OnLogOutTimeChanging(System.DateTime value);
    partial void OnLogOutTimeChanged();
    #endregion
		
		public UserLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogInTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime LogInTime
		{
			get
			{
				return this._LogInTime;
			}
			set
			{
				if ((this._LogInTime != value))
				{
					this.OnLogInTimeChanging(value);
					this.SendPropertyChanging();
					this._LogInTime = value;
					this.SendPropertyChanged("LogInTime");
					this.OnLogInTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogOutTime", DbType="DateTime NOT NULL")]
		public System.DateTime LogOutTime
		{
			get
			{
				return this._LogOutTime;
			}
			set
			{
				if ((this._LogOutTime != value))
				{
					this.OnLogOutTimeChanging(value);
					this.SendPropertyChanging();
					this._LogOutTime = value;
					this.SendPropertyChanged("LogOutTime");
					this.OnLogOutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLog", Storage="_User", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLogs.Add(this);
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeId;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<UserLog> _UserLogs;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._UserLogs = new EntitySet<UserLog>(new Action<UserLog>(this.attach_UserLogs), new Action<UserLog>(this.detach_UserLogs));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLog", Storage="_UserLogs", ThisKey="EmployeeId", OtherKey="EmployeeId")]
		public EntitySet<UserLog> UserLogs
		{
			get
			{
				return this._UserLogs;
			}
			set
			{
				this._UserLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_User", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.User = null;
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.User = this;
						this._EmployeeId = value.EmployeeId;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
